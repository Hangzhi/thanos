// Package RulesOpenapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package RulesOpenapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for AlertState.
const (
	AlertStateN0 AlertState = 0

	AlertStateN1 AlertState = 1

	AlertStateN2 AlertState = 2
)

// Defines values for AlertInstancePartialResponseStrategy.
const (
	AlertInstancePartialResponseStrategyN0 AlertInstancePartialResponseStrategy = 0

	AlertInstancePartialResponseStrategyN1 AlertInstancePartialResponseStrategy = 1
)

// Defines values for AlertInstanceState.
const (
	AlertInstanceStateN0 AlertInstanceState = 0

	AlertInstanceStateN1 AlertInstanceState = 1

	AlertInstanceStateN2 AlertInstanceState = 2
)

// Defines values for RuleGroupPartialResponseStrategy.
const (
	RuleGroupPartialResponseStrategyN0 RuleGroupPartialResponseStrategy = 0

	RuleGroupPartialResponseStrategyN1 RuleGroupPartialResponseStrategy = 1
)

// Alert defines model for Alert.
type Alert struct {
	Alerts                    *[]AlertInstance `json:"alerts,omitempty"`
	Annotations               *ZLabelSet       `json:"annotations,omitempty"`
	DurationSeconds           *float64         `json:"duration_seconds,omitempty"`
	EvaluationDurationSeconds *float64         `json:"evaluation_duration_seconds,omitempty"`
	Health                    *string          `json:"health,omitempty"`
	Labels                    *ZLabelSet       `json:"labels,omitempty"`
	LastError                 *string          `json:"last_error,omitempty"`
	LastEvaluation            *string          `json:"last_evaluation,omitempty"`
	Name                      *string          `json:"name,omitempty"`
	Query                     *string          `json:"query,omitempty"`

	// / state returns the maximum state of alert instances for this rule.
	State *AlertState `json:"state,omitempty"`
}

// / state returns the maximum state of alert instances for this rule.
type AlertState int

// AlertInstance defines model for AlertInstance.
type AlertInstance struct {
	// Thanos specific. Used mainly for alert API purposes.
	PartialResponseStrategy *AlertInstancePartialResponseStrategy `json:"PartialResponseStrategy,omitempty"`
	ActiveAt                *string                               `json:"active_at,omitempty"`
	Annotations             *ZLabelSet                            `json:"annotations,omitempty"`
	Labels                  *ZLabelSet                            `json:"labels,omitempty"`
	State                   *AlertInstanceState                   `json:"state,omitempty"`
	Value                   *string                               `json:"value,omitempty"`
}

// Thanos specific. Used mainly for alert API purposes.
type AlertInstancePartialResponseStrategy int

// AlertInstanceState defines model for AlertInstance.State.
type AlertInstanceState int

// Label defines model for Label.
type Label struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// RecordingRule defines model for RecordingRule.
type RecordingRule struct {
	EvaluationDurationSeconds *float64   `json:"evaluation_duration_seconds,omitempty"`
	Health                    *string    `json:"health,omitempty"`
	Labels                    *ZLabelSet `json:"labels,omitempty"`
	LastError                 *string    `json:"last_error,omitempty"`
	LastEvaluation            *string    `json:"last_evaluation,omitempty"`
	Name                      *string    `json:"name,omitempty"`
	Query                     *string    `json:"query,omitempty"`
}

// Rule defines model for Rule.
type Rule struct {
	Alert     *Alert         `json:"alert,omitempty"`
	Recording *RecordingRule `json:"recording,omitempty"`
}

// / RuleGroup has info for rules which are part of a group.
type RuleGroup struct {
	// Thanos specific.
	PartialResponseStrategy   *RuleGroupPartialResponseStrategy `json:"PartialResponseStrategy,omitempty"`
	EvaluationDurationSeconds *float64                          `json:"evaluation_duration_seconds,omitempty"`
	File                      *string                           `json:"file,omitempty"`
	Interval                  *float64                          `json:"interval,omitempty"`
	LastEvaluation            *string                           `json:"last_evaluation,omitempty"`
	Name                      *string                           `json:"name,omitempty"`
	Rules                     *[]Rule                           `json:"rules,omitempty"`
}

// Thanos specific.
type RuleGroupPartialResponseStrategy int

// / RuleGroups is set of rule groups./ This and below APIs are meant to be used for unmarshaling and marshsaling rules from/to Prometheus API./ That's why json tag has to be customized and matching https://github.com/prometheus/prometheus/blob/c530b4b456cc5f9ec249f771dff187eb7715dc9b/web/api/v1/api.go#L955/ NOTE: See rules_custom_test.go for compatibility tests.// For rule parsing from YAML configuration other struct is used: https://github.com/prometheus/prometheus/blob/20b1f596f6fb16107ef0c244d240b0ad6da36829/pkg/rulefmt/rulefmt.go#L105
type RuleGroups struct {
	Groups *[]RuleGroup `json:"groups,omitempty"`
}

// ZLabelSet defines model for ZLabelSet.
type ZLabelSet struct {
	Labels *[]Label `json:"labels,omitempty"`
}

// RulesGetRulesParams defines parameters for RulesGetRules.
type RulesGetRulesParams struct {
	// / The type to request.
	Type *string `json:"type,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// RulesGetRulesAlert request
	RulesGetRulesAlert(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RulesGetRules request
	RulesGetRules(ctx context.Context, params *RulesGetRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) RulesGetRulesAlert(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRulesGetRulesAlertRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RulesGetRules(ctx context.Context, params *RulesGetRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRulesGetRulesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewRulesGetRulesAlertRequest generates requests for RulesGetRulesAlert
func NewRulesGetRulesAlertRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/alerts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRulesGetRulesRequest generates requests for RulesGetRules
func NewRulesGetRulesRequest(server string, params *RulesGetRulesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// RulesGetRulesAlert request
	RulesGetRulesAlertWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RulesGetRulesAlertResponse, error)

	// RulesGetRules request
	RulesGetRulesWithResponse(ctx context.Context, params *RulesGetRulesParams, reqEditors ...RequestEditorFn) (*RulesGetRulesResponse, error)
}

type RulesGetRulesAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Alert
}

// Status returns HTTPResponse.Status
func (r RulesGetRulesAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RulesGetRulesAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RulesGetRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RuleGroups
}

// Status returns HTTPResponse.Status
func (r RulesGetRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RulesGetRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// RulesGetRulesAlertWithResponse request returning *RulesGetRulesAlertResponse
func (c *ClientWithResponses) RulesGetRulesAlertWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RulesGetRulesAlertResponse, error) {
	rsp, err := c.RulesGetRulesAlert(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRulesGetRulesAlertResponse(rsp)
}

// RulesGetRulesWithResponse request returning *RulesGetRulesResponse
func (c *ClientWithResponses) RulesGetRulesWithResponse(ctx context.Context, params *RulesGetRulesParams, reqEditors ...RequestEditorFn) (*RulesGetRulesResponse, error) {
	rsp, err := c.RulesGetRules(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRulesGetRulesResponse(rsp)
}

// ParseRulesGetRulesAlertResponse parses an HTTP response from a RulesGetRulesAlertWithResponse call
func ParseRulesGetRulesAlertResponse(rsp *http.Response) (*RulesGetRulesAlertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RulesGetRulesAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Alert
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRulesGetRulesResponse parses an HTTP response from a RulesGetRulesWithResponse call
func ParseRulesGetRulesResponse(rsp *http.Response) (*RulesGetRulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RulesGetRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuleGroups
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets alerts. No parameters will be processed.
	// (GET /api/v1/alerts)
	RulesGetRulesAlert(ctx echo.Context) error
	// Gets rules. User can pass "rules?type=record" to get rule record instead of full rules.
	// (GET /api/v1/rules)
	RulesGetRules(ctx echo.Context, params RulesGetRulesParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// RulesGetRulesAlert converts echo context to params.
func (w *ServerInterfaceWrapper) RulesGetRulesAlert(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RulesGetRulesAlert(ctx)
	return err
}

// RulesGetRules converts echo context to params.
func (w *ServerInterfaceWrapper) RulesGetRules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RulesGetRulesParams
	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RulesGetRules(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/alerts", wrapper.RulesGetRulesAlert)
	router.GET(baseURL+"/api/v1/rules", wrapper.RulesGetRules)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xW3Y7bNhN9FYL5gO/GkOT/2EBRBEUTBE2TYHd70SbBgqJGEluJVDij3brBvnsxpH/W",
	"sTd2tuldrySLnsPhmTNn+Elq13bOgiWUy08SdQ2tCq/PGvDEL513HXgyED4r/hzeDEEbXv7noZRL+STd",
	"YaVroDSgvLRIymqQdwNJqw7kUirv1Yp/K2sdKTLOnsT67ZXKobkE4rii9yHqGkE7W4Tg0vlWkVzKwvV5",
	"A3K7m+3bHDyHwY1q+hj4SIQaVEM1/3m9hOSNrXip4fy+7hiNQroG751/AJGXtznvpXjx/IfxeLzY5bgL",
	"s6qFo3gfe/CroytIikJMAai96eJ2MhVhQXig3lsUVINo1Z+m7dv1iitF0IQw6yqjKJ0XVBsUvm8gkQMJ",
	"tm/l8l02GA5GH7b5GktQMal3dwO5L5QD2b1VnoxqLgA7ZxEuySuCanWY8FWtrEOBHWhTGp2IXxAK0Spj",
	"m1VILCb77O1L0fW+cwi4n+GR/AZSaTI3cK3o3Ao8VtaPkNC2cidYHkjW0TFdMP8B8ZD3B5X0JawL0M4X",
	"xlYXfXOklv/14NEeDMwdJUxtrPik0zK+37B/KmK/TNv9X3jXd8ecYLsoaoXC2NKFhuImR3FbG10L5UF0",
	"ylNwBVHxn7m7vlEvn+7Tfy6t0jTHy8a7+BvVnInzrVUTWD577MaKfj5t9yqMXywxCoMCIRSSt461xCQV",
	"V2zsyhYih8bdspFiKHsLypIgJ3IQPXsua6O3rfJYq8bYKgSFnxh/R+GU3rUpOfHWuxaohh4ZM2yk6P8s",
	"rJX4HZ0VpKogvLiF7pFca/6CYo1LumbQmqjDZZpWhuo+T7Rr026LfP81b1ye6uk4yyf5ZDrTelouQI8m",
	"i3I+HxZlOXw6h3w+H04LvcjTW8hT1Zn0ZsiPpHJPXi2m01S8fnP141JcAsTTXMe0rgmQkir2B5dHkclN",
	"Y2gleAWTNBXP163D/YKcORMhfn328yuhnS1NtdavcFSDF0i+18RVYXKXX3nOUZYPy+liVs7KfDgbZnMo",
	"Mz2aTIrRJMszVcwKNZ49HS3S7o8q5azKljbPcNhhNj3o42oro7M1Gb3lqDB3lnzgfztPP2ujOMqObHIX",
	"2rh0DykfhYfOAzJauCFQrQLlPlqVyRsIJa0U12SnYVYg1WB8uBP16zsFGWIvCS2HciBvwGPcLkuyZMgZ",
	"ug6s6oxcynGSJWOmWFEdTriV2/bCXUVumJmgjJfFBvwFUHjGGcAjIFprCBtlGT+0swQ2IKiua4wOGCm3",
	"1u7mf+aQYSL3CXzzk+SP2Let4ukmXwBhvGthIl47VrlqgcCjuDVNwy3ceacBEYokxG4OvHW60+cNfG1w",
	"5fLdYVmvahAsA3YNDx977kvJKpDL9SDeeG5Uy+AeEZ/P5w//IrH3bPlsdgNR4YLrhVZWdApRvI+T4ntO",
	"/rt4FXgv+fQVUPSb+DFc10EVbPBl3zRrtNAmfwcAAP//iEtW6hYOAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

